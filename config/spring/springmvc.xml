<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd    
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd    
            http://www.springframework.org/schema/util 
            http://www.springframework.org/schema/util/spring-util-3.0.xsd">
	<!-- 处理器 -->  
    <!-- <bean name="/index" class="com.xiaoyang.controller.IndexController"/>  
                             用下面的 扫描组件解决-->  
	
	<!-- 组件扫描 -->
	<context:component-scan base-package="com.xiaoyang.controller"/>
	
	<!-- 
	BeanNameUrlHandlerMapping：表示将请求的URL和Bean名字映射，如URL为 “上下文/hello”，
	则Spring配置文件必须有一个名字为“/hello”的Bean，上下文默认忽略。
	
	SimpleControllerHandlerAdapter：表示所有实现了org.springframework.web.servlet.mvc.Controller
	接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。
	-->
    <!-- 处理器映射器   HandlerMapping -->  
    <!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/> -->  
    
    <!-- 处理器 适配器   HandlerAdapter -->  
	<!-- <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>-->
	<!-- 使用 annotation-driven 替代上面的 处理器映射器 处理器适配器-->
	<mvc:annotation-driven conversion-service="conversionService" validator="validator"/>
	<!-- 使用Spring 3开始的ConversionService进行类型转换（PropertyEditor依然有效），
		  支持使用@NumberFormat 和 @DateTimeFormat来进行数字和日期的格式化；
	 -->
	 
	 <!-- BeanNameUrlHandlerMapping：表示将请求的URL和Bean名字映射，如URL为 “上下文/hello”，
			则Spring配置文件必须有一个名字为“/hello”的Bean，上下文默认忽略。

		org.springframework.web.servlet.HandlerMapping=
	  	org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\
		org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping
		
		 SimpleControllerHandlerAdapter：表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean
			可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。	
		org.springframework.web.servlet.HandlerAdapter=		
		org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\
		org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\
		org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter -->
	 
	
	<!-- 日期转换 -->	
	<bean id = "conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="com.xiaoyang.controller.converter.CustomDateConvert"></bean>
			</list>
		</property>
	</bean>
	
	<!-- controller段校验前台传来的参数 -->
	<bean id= "validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<property name="validationMessageSource" ref = "messageSource"/>
	</bean>
	<!-- 校验错误配置文件 -->
	<bean id="messageSource" class ="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 对资源文件名，位置 -->
		<property name="basenames">
			<list>
				<value>classpath:CustomValidationMessages</value>
			</list>
		</property>
		<!-- 对资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8"/>
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120"/>
	</bean>	
	
	<!-- 
	内部资源 视图解析器
	InternalResourceViewResolver：用于支持Servlet、JSP视图解析；
    viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包；
    prefix和suffix：查找视图页面的前缀和后缀（前缀[逻辑视图名]后缀），比如传进来的逻辑视图名为hello，
            则该该jsp视图页面应该存放在“WEB-INF/jsp/hello.jsp”；
    -->
    <!-- ViewResolver -->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>  
        <property name="prefix" value="/WEB-INF/jsp/"/>  
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- FileUpload Resolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="maxInMemorySize">
    		<value>5242880</value>
    	</property>
    </bean>
    <!-- 拦截器 -->
    <mvc:interceptors>
    <!-- 多个拦截器顺序执行 -->
    	<mvc:interceptor>
    		<!-- /**表示所有url包括子url路径 -->
    		<mvc:mapping path="/**"/>
    		<!-- 拦截到以后执行的handler -->
    		<bean class="com.xiaoyang.controller.interceptor.LoginHandlerInterceptor"/>
    	</mvc:interceptor>
    	
    	<mvc:interceptor>
    		<!-- /**表示所有url包括子url路径 -->
    		<mvc:mapping path="/**"/>
    		<!-- 拦截到以后执行的handler -->
    		<bean class="com.xiaoyang.controller.interceptor.HandlerInterceptor1"/>
    	</mvc:interceptor>
    	
    	<mvc:interceptor>
    		<!-- /**表示所有url包括子url路径 -->
    		<mvc:mapping path="/**"/>
    		<!-- 拦截到以后执行的handler -->
    		<bean class="com.xiaoyang.controller.interceptor.HandlerInterceptor2"/>
    	</mvc:interceptor>
    	
    </mvc:interceptors>
</beans>

